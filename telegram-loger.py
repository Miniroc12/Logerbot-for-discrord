import re
import sqlite3
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from tokens import TELEGRAM_TOKEN

TOKEN = TELEGRAM_TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()
dp["bot"] = bot

#  –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ –±–∞–∑—ã
def get_logs(event_type=None, date=None):
    conn = sqlite3.connect("logs.db")
    cursor = conn.cursor()

    query = "SELECT username, event, channel, timestamp FROM logs"
    params = []
    conditions = []

    if event_type:
        conditions.append("event = ?")
        params.append(event_type)
    if date:
        conditions.append("DATE(timestamp) = ?")
        params.append(date)

    if conditions:
        query += " WHERE " + " AND ".join(conditions)

    query += " ORDER BY id DESC LIMIT 20"

    cursor.execute(query, params)
    logs = cursor.fetchall()
    conn.close()
    return logs

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéôÔ∏è –í—Ö–æ–¥ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", callback_data="log_voice_join")],
            [InlineKeyboardButton(text="üì§ –í—ã—Ö–æ–¥ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", callback_data="log_voice_leave")],
            [InlineKeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="log_message")],
            [InlineKeyboardButton(text="üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="log_user_join")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –ª–æ–≥–∏", callback_data="log_all")],
        ]
    )

#  –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é 
menu_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def show_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:", reply_markup=main_menu())
    await message.answer("üìå –ù–∞–∂–∏–º–∞–π—Ç–µ ¬´–ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!", reply_markup=menu_button)

@dp.message(lambda message: message.text == "–ú–µ–Ω—é")
async def burger_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:", reply_markup=main_menu())

#  –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
def format_log(log):
    username, event, channel, timestamp = log
    event_messages = {
        "voice_join": f"üéôÔ∏è {username} –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª ¬´{channel}¬ª",
        "voice_leave": f"üì§ {username} –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ¬´{channel}¬ª",
        "message": f"üí¨ {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ¬´{channel}¬ª",
        "join": f"üë• {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
        "leave": f"üë• {username} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä"
    }
    return f"üïí {timestamp}\n{event_messages.get(event, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')}"

#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
@dp.callback_query(lambda call: call.data.startswith("log_") and call.data != "log_search_by_date")
async def send_logs_by_type(call: types.CallbackQuery):
    event_map = {
        "log_voice_join": "voice_join",
        "log_voice_leave": "voice_leave",
        "log_message": "message",
        "log_user_join": "join",
        "log_user_leave": "leave",
        "log_all": None  # –í—Å–µ –ª–æ–≥–∏
    }

    event_type = event_map.get(call.data)
    logs = get_logs(event_type=event_type)

    if not logs:
        await call.message.edit_text("‚ùå –õ–æ–≥–∏ –ø—É—Å—Ç—ã.", reply_markup=main_menu())
        return

    text = "\n\n".join([format_log(log) for log in logs])
    await call.message.edit_text(f"üìã –õ–æ–≥–∏:\n{text}", reply_markup=main_menu())


# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
